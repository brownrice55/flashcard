(()=>{const t={methods:{alerts(){for(let t=0;t<4;++t)this.alert[t]=this.input[t]?"":"入力してください。"}}},e={methods:{getNow(){let t=new Date;return t.getFullYear()+"/"+(t.getMonth()+1)+"/"+t.getDate()+" "+t.getHours()+":"+t.getMinutes()}}};Vue.createApp({data:()=>({current:"memorize",pages:{memorize:"単語を覚える",register:"単語を登録する"},allWords:JSON.parse(localStorage.getItem("allWords"))||[]}),provide(){return{allWords:this.allWords}},methods:{onClick(t){this.current=t}},computed:{currentPage(){return`page-${this.current}`}},mounted(){this.allWords.length<10&&(this.current="register")}}).component("page-memorize",{data:()=>({name:""}),template:"<div>\n    <h2>単語を覚える</h2>\n    <p>単語を１０個覚えましょう。</p>\n    <memorize-vocabulary></memorize-vocabulary>\n    </div>"}).component("memorize-vocabulary",{inject:["allWords"],data:()=>({isAuto:!1,isManual:!1,isInOrder:!0,isStopped:!1,random10Words:[],displayWords:"",intervalTimerArray:[],countUp:0,autoSpeedArray:[3,7,11,15],isRegularSpeed:!0,speedLabel:"少し速め",speedNow:"少し遅め",orderLabel:"意味→単語",orderNow:"単語→意味",stoppedLabel:"停止する",randomNo:0,alreadyMemorized10Words:[],isComplete:!1}),mounted(){let t,e=[],s=[];for(let t=0,i=this.allWords.length;t<i;++t)this.allWords[t][4]?s.push(this.allWords[t].concat([t])):e.push(this.allWords[t].concat([t]));if(e.length<10){s.sort((function(t,e){return t<e?-1:1}));for(let t=0,i=10-e.length;t<i;++t)e.push(s[t])}for(let s=0,i=e.length;s<10;++s,--i)t=Math.floor(Math.random()*this.allWords),this.random10Words.push(e.splice(t,1)[0])},template:'\n      <div class="displayWords" v-if="isAuto">\n        <template v-if="isComplete">\n          <p>単語を全て覚えました。覚えた単語は下記です。</p>\n          <ul>\n            <li v-for="word in alreadyMemorized10Words">{{ word[0] }} - {{ word[1] }}</li>\n          </ul>\n        </template>\n        <template v-else>\n          <div class="displayWords__smallBtn">\n            <small>現在の表示順：{{ orderNow }}</small>　<button @click="onReverse">{{ orderLabel }}に変更</button><br />\n            <small>現在の速度：{{ speedNow }}</small>   <button @click="onChangeSpeed">{{ speedLabel }}に変更</button>\n          </div>\n          <p class="displayWords__word">\n            {{ displayWords }}\n          </p>\n          <div class="displayWords__btn">\n            <template v-if="isAuto">\n              <template v-if="isStopped">\n                <p><small>停止中</small></p>\n              </template>\n              <button @click="onAlreadyMemorized" :disabled="isStopped">もう覚えた</button>\n              <button @click="onStop">{{ stoppedLabel }}</button>\n              <p><small>再生中の単語を覚えたと思ったら、「もう覚えた」ボタンを押してね。</small></p>\n              <p><small>覚えた単語 {{ alreadyMemorized10Words.length }}/10個</small></p>\n            </template>\n          </div>\n        </template>\n      </div>\n      <div v-if="isManual">\n        <template v-if="isComplete">\n          <p></p>\n        </template>\n        <template v-else>\n          <button>次へ</button>\n        </template>\n      </div>\n      <div class="displayWords__commonBtn">\n        <button @click="onAutoPlay" :disabled="isAuto">自動で再生する</button>\n        <button @click="onManualPlay" :disabled="isManual">手動で再生する</button>\n      </div>\n    ',methods:{onAutoPlay(){this.isAuto=!0,this.isManual=!1,this.randomNo=this.getRandomIndex(),this.displayWords=this.random10Words[this.randomNo][0],this.autoPlay()},autoPlay(){this.intervalTimerArray.push(setInterval(function(){++this.countUp,this.countUp<this.autoSpeedArray[0]?this.displayWords=this.isInOrder?this.random10Words[this.randomNo][0]:this.random10Words[this.randomNo][1]:this.countUp<this.autoSpeedArray[1]?this.displayWords=this.isInOrder?this.random10Words[this.randomNo][1]:this.random10Words[this.randomNo][0]:this.countUp<this.autoSpeedArray[2]?this.displayWords=this.isInOrder?this.random10Words[this.randomNo][2]:this.random10Words[this.randomNo][3]:this.countUp<this.autoSpeedArray[3]?this.displayWords=this.isInOrder?this.random10Words[this.randomNo][3]:this.random10Words[this.randomNo][2]:(this.randomNo=this.getRandomIndex(),this.countUp=0)}.bind(this),1e3))},onStop(){this.isStopped=!this.isStopped,this.stoppedLabel=this.isStopped?"再開する":"停止する",this.isStopped&&this.intervalTimerArray.length>0&&clearInterval(this.intervalTimerArray.shift()),this.isStopped||this.autoPlay()},getRandomIndex(){return parseInt(Math.random()*this.random10Words.length)},onChangeSpeed(){this.isRegularSpeed=!this.isRegularSpeed,this.autoSpeedArray=this.isRegularSpeed?[3,7,11,15]:[2,4,6,8],this.speedNow=this.isRegularSpeed?"少し遅め":"少し速め",this.speedLabel=this.isRegularSpeed?"少し速め":"少し遅め"},onReverse(){this.isInOrder=!this.isInOrder,this.orderNow=this.isInOrder?"単語→意味":"意味→単語",this.orderLabel=this.isInOrder?"意味→単語":"単語→意味"},onAlreadyMemorized(){clearInterval(this.intervalTimerArray.shift());let t=this.random10Words[this.randomNo][5];this.allWords[t][4]=this.getNow(),localStorage.setItem("allWords",JSON.stringify(this.allWords)),this.alreadyMemorized10Words.push(this.random10Words[this.randomNo]),this.random10Words.splice(this.randomNo,1),this.random10Words.length?(this.countUp=0,this.onAutoPlay()):this.isComplete=!0},onManualPlay(){this.isAuto&&this.intervalTimerArray.length>0&&clearInterval(this.intervalTimerArray.shift()),this.isAuto=!1}},mixins:[e]}).component("page-register",{data(){return{name:"",isNotEdit:!0,editIndex:this.editIndex}},provide(){return{isNotEdit:this.isNotEdit}},template:'\n    <div v-if="isNotEdit">\n      <h2>単語を登録する</h2>\n      <register-new></register-new>\n      <register-list @judgeIsNotEdit="judgeIsNotEdit"></register-list>\n    </div>\n    <div v-else>\n      <list-edit @judgeIsNotEdit="judgeIsNotEdit" :editIndex="editIndex"></list-edit>\n    </div>\n    ',methods:{judgeIsNotEdit(t){this.isNotEdit=!this.isNotEdit,this.editIndex=t}}}).component("register-new",{inject:["allWords"],data:()=>({input:["","","",""],alert:["","","",""],isDisabled:!0,isAdded:!1}),template:'<div>\n      <h3>新規登録</h3>\n      <dl class="form">\n        <dt>単語<small class="required">※必須 {{ alert[0] }}</small></dt>\n        <dd><input type="text" size="30" v-model="input[0]" /><br /><small>例）apple</small></dd>\n        <dt>単語の意味<small class="required">※必須 {{ alert[1] }}</small></dt>\n        <dd><input type="text" size="30" v-model="input[1]" /><br /><small>例）りんご</small></dd>\n        <dt>例文<small class="required">※必須 {{ alert[2] }}</small></dt>\n        <dd><textarea cols="50" rows="3" v-model="input[2]"></textarea><br><small>例）I like apples.</small></dd>\n        <dt>例文の意味<small class="required">※必須 {{ alert[3] }}</small></dt>\n        <dd><textarea cols="50" rows="3" v-model="input[3]"></textarea><br><small>例）私はりんごが好きです。</small></dd>\n      </dl>\n      <button @click="onRegister" :disabled="isDisabled">単語を登録する</button>\n    </div>',watch:{input:{handler(t){this.isDisabled=!this.input.every((t=>t.length>0)),this.isAdded?this.isAdded=!1:this.alerts()},deep:!0}},methods:{onRegister(){this.input.push(""),this.allWords.push(this.input),localStorage.setItem("allWords",JSON.stringify(this.allWords)),this.input=["","","",""],this.isAdded=!0}},mixins:[t]}).component("register-list",{inject:["allWords"],emits:["judgeIsNotEdit"],template:'<div>\n      <h3>まだ覚えていない単語</h3>\n      <ul class="list">\n        <template v-for="(word, index) in allWords" :key="word">\n        <li v-if="!word[4]" @click="onEdit(index)">{{ word[0] }}</li>\n        </template>\n      </ul>\n      <h3>既に覚えた単語</h3>\n      <ul class="list">\n        <template v-for="(word, index) in allWords" :key="word">\n        <li v-if="word[4]" @click="onEdit(index)">{{ word[0] }}</li>\n        </template>\n      </ul>\n    </div>',methods:{onEdit(t){this.$emit("judgeIsNotEdit",t)}}}).component("list-edit",{data(){return{input:[this.allWords[this.editIndex][0],this.allWords[this.editIndex][1],this.allWords[this.editIndex][2],this.allWords[this.editIndex][3]],hasAlreadyMemorized:!!this.allWords[this.editIndex][4],registerDate:this.allWords[this.editIndex][4]?this.allWords[this.editIndex][4]:"",isDisabled:!0,alert:["","","",""],isAuto:this.isAuto}},inject:["allWords"],props:["editIndex"],emits:["judgeIsNotEdit"],template:'<div>\n      <h3>単語の編集</h3>\n      <dl class="form">\n        <dt>単語<small class="required">※必須 {{ alert[0] }}</small></dt>\n        <dd><input type="text" size="30" v-model="input[0]" /><br /><small>例）apple</small></dd>\n        <dt>単語の意味<small class="required">※必須 {{ alert[1] }}</small></dt>\n        <dd><input type="text" size="30" v-model="input[1]" /><br /><small>例）りんご</small></dd>\n        <dt>例文<small class="required">※必須 {{ alert[2] }}</small></dt>\n        <dd><textarea cols="50" rows="3" v-model="input[2]"></textarea><br><small>例）I like apples.</small></dd>\n        <dt>例文の意味<small class="required">※必須 {{ alert[3] }}</small></dt>\n        <dd><textarea cols="50" rows="3" v-model="input[3]"></textarea><br><small>例）私はりんごが好きです。</small></dd>\n        <dt></dt>\n        <dd>\n          <label><input type="checkbox" v-model="hasAlreadyMemorized" />この単語を覚えた</label>\n          <template v-if="hasAlreadyMemorized">（{{ registerDate }}）</template>\n        </dd>\n      </dl>\n      <button @click="onChange(editIndex)" :disabled="isDisabled">変更を保存する</button>\n      <button @click="onUnchange()">変更せずに一覧に戻る</button><br />\n      <button @click="onDelete(editIndex)">この単語を削除する</button>\n    </div>',watch:{input:{handler(){this.judgeDisabled(),this.alerts()},deep:!0},hasAlreadyMemorized(){this.registerDate=this.hasAlreadyMemorized?this.getNow():this.allWords[this.editIndex][4],this.judgeDisabled()}},methods:{onChange(t){let e=this.hasAlreadyMemorized?this.registerDate:"",s=this.input.concat([e]);this.allWords.splice(t,1,s),localStorage.setItem("allWords",JSON.stringify(this.allWords)),this.$emit("judgeIsNotEdit")},onUnchange(){this.$emit("judgeIsNotEdit")},onDelete(t){this.allWords.splice(t,1),localStorage.setItem("allWords",JSON.stringify(this.allWords)),this.$emit("judgeIsNotEdit")},judgeDisabled(){let t=this.input.concat([this.registerDate]).toString()!==this.allWords[this.editIndex].toString();this.isDisabled=!t&&Boolean(this.allWords[this.editIndex][4])===this.hasAlreadyMemorized}},mixins:[t,e]}).mount(".v-container")})();