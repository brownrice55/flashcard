Vue.createApp({data:()=>({current:"memorize",pages:{memorize:"単語を覚える",register:"単語を登録する"},allWords:JSON.parse(localStorage.getItem("allWords"))||[]}),provide(){return{allWords:this.allWords}},methods:{onclick(t){this.current=t}},computed:{currentPage(){return`page-${this.current}`}}}).component("page-memorize",{data:()=>({name:""}),template:"<div>\n    <h2>単語を覚える</h2>\n    <p>単語を１０個覚えましょう。覚えたら「覚えた」ボタンを押してね。</p>\n    <memorize-vocabulary></memorize-vocabulary>\n    </div>"}).component("page-register",{data(){return{name:"",isNotEdit:!0,editIndex:this.editIndex}},provide(){return{isNotEdit:this.isNotEdit}},template:'\n    <div v-if="isNotEdit">\n      <h2>単語を登録する</h2>\n      <register-new></register-new>\n      <register-list @judgeIsNotEdit="judgeIsNotEdit"></register-list>\n    </div>\n    <div v-else>\n      <list-edit @judgeIsNotEdit="judgeIsNotEdit" :editIndex="editIndex"></list-edit>\n    </div>\n    ',methods:{judgeIsNotEdit(t){this.isNotEdit=!this.isNotEdit,this.editIndex=t}}}).component("register-new",{data:()=>({register1:"",register2:"",register3:"",register4:"",alert1:"",alert2:"",alert3:"",alert4:""}),template:'<div>\n      <h3>新規登録</h3>\n      <dl class="form">\n        <dt>単語<small class="required">※必須 {{ alert1 }}</small></dt>\n        <dd><input type="text" size="30" v-model="register1" /><br /><small>例）apple</small></dd>\n        <dt>単語の意味<small class="required">※必須 {{ alert2 }}</small></dt>\n        <dd><input type="text" size="30" v-model="register2" /><br /><small>例）りんご</small></dd>\n        <dt>例文<small class="required">※必須 {{ alert3 }}</small></dt>\n        <dd><textarea cols="50" rows="3" v-model="register3"></textarea><br><small>例）I like apples.</small></dd>\n        <dt>例文の意味<small class="required">※必須 {{ alert4 }}</small></dt>\n        <dd><textarea cols="50" rows="3" v-model="register4"></textarea><br><small>例）私はりんごが好きです。</small></dd>\n      </dl>\n      <button @click="onRegister">新規登録</button>\n    </div>',watch:{register1(){}},methods:{onRegister(){this.alert1=this.register1?"":"入力してください",this.alert2=this.register2?"":"入力してください",this.alert3=this.register3?"":"入力してください",this.alert4=this.register4?"":"入力してください"}}}).component("register-list",{inject:["allWords"],emits:["judgeIsNotEdit"],template:'<div>\n      <h3>まだ覚えていない単語</h3>\n      <ul class="list">\n        <template v-for="(word, index) in allWords" :key="word">\n        <li v-if="!word[4]" @click="onEdit(index)">{{ word[0] }}</li>\n        </template>\n      </ul>\n      <h3>既に覚えた単語</h3>\n      <ul class="list">\n        <template v-for="(word, index) in allWords" :key="word">\n        <li v-if="word[4]" @click="onEdit(index)">{{ word[0] }}</li>\n        </template>\n      </ul>\n    </div>',methods:{onEdit(t){this.$emit("judgeIsNotEdit",t)}}}).component("list-edit",{data(){return{register1:this.allWords[this.editIndex][0],register2:this.allWords[this.editIndex][1],register3:this.allWords[this.editIndex][2],register4:this.allWords[this.editIndex][3],register5:!!this.allWords[this.editIndex][4],registerDate:this.allWords[this.editIndex][4]?this.allWords[this.editIndex][4]:""}},inject:["allWords"],props:["editIndex"],emits:["judgeIsNotEdit"],template:'<div>\n      <h3>単語の編集</h3>\n      <dl class="form">\n        <dt>単語<small class="required">※必須 {{ alert1 }}</small></dt>\n        <dd><input type="text" size="30" v-model="register1" /><br /><small>例）apple</small></dd>\n        <dt>単語の意味<small class="required">※必須 {{ alert2 }}</small></dt>\n        <dd><input type="text" size="30" v-model="register2" /><br /><small>例）りんご</small></dd>\n        <dt>例文<small class="required">※必須 {{ alert3 }}</small></dt>\n        <dd><textarea cols="50" rows="3" v-model="register3"></textarea><br><small>例）I like apples.</small></dd>\n        <dt>例文の意味<small class="required">※必須 {{ alert4 }}</small></dt>\n        <dd><textarea cols="50" rows="3" v-model="register4"></textarea><br><small>例）私はりんごが好きです。</small></dd>\n        <dt></dt>\n        <dd>\n          <label><input type="checkbox" v-model="register5" />この単語を覚えた</label>\n          <template v-if="register5">（{{ registerDate }}）</template>\n        </dd>\n      </dl>\n      <button @click="onChange()">変更を保存する</button>\n      <button @click="onUnchange()">変更せずに一覧に戻る</button>\n      <button @click="onDelete()">この単語を削除する</button>\n    </div>',methods:{onChange(t){this.$emit("judgeIsNotEdit")},onUnchange(){this.$emit("judgeIsNotEdit")},onDelete(){this.$emit("judgeIsNotEdit")}}}).component("memorize-vocabulary",{template:'\n      <div>\n        <span>単語→意味</span>\n        <div class="displayWords">\x3c!-- 単語を表示 --\x3e</div>\n        <div v-if="isNowPlaying">\n          <template v-if="isAuto">\n            <button>停止する</button>\n          </template>\n          <template v-else>\n            <button>次へ</button>\n          </template>\n          <button>もう覚えた</button><br>\n          <button>単語の意味と表示順を逆にする</button>\n        </div>\n        <div v-else>\n          <button>自動で再生する</button>\n          <button>手動で再生する</button>\n        </div>\n      </div>\n    ',data:()=>({isNowPlaying:!1,isAuto:!0})}).mount(".v-container");